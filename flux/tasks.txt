TODO

- write Control instead of Command in docs; mention Command for OS X.  use Alt-Period instead of Control-Period to toggle ellipsis input.
- for hidden connections, separate ports vertically so that the src conntxt is not below the dst conntxt
- place seqIn above node focus in ifNode, loopNode, and selectNode
- in browser, don't allow entering interface types
- allow use of pointer-to-non-comparable-struct as map key type in typeView
- allow empty parameter/result names in func editor; ignore uniqueness, write uniquely, interpret as empty
- in selectionBrowser, indirect pointer-to-interface and pointer-to-pointer
- fix focusing/connection weirdness when connecting to loopNode input, probably related to ports being created/deleted
- show port.typ when editing a connection
- bug: when editing a connection src, moving it between two outputs that have named connections corrupts the second name with the first
- handle unknown IDs in reader:
  - type in signature
  - local var type (including loop var).  can safely ignore?
  - package name.  avoidable by always using named imports
- prompt to Save, Don't Save, or Cancel when closing a func
- replace outputsNode with a return node, give return node inputs.  this will make early returns much more readable
- each connection to an input must originate from a different block.  only one connection to an input may originate from the input's block or an outer block.  (too restrictive?:  if node A precedes node B then an input may not have connections originating from both A and B)
- type switch
- len and capacity inputs for make, max input for slice, ok output for type assert (also mapget and chanrecv?), 1st input for XOR (^) (also plus, minus?) are optional, creatable by Comma key, deletable
- shortcuts:
  - on a port, press Space to open a browser with funcs suitable for connection
  - on an input, press '{' to create a composite or func literal of the port's type
  - on a pointer output, press '=' to create an assignment node
  - on a node or connection, press cmd-R(cmd-I?) (just Enter?) to bring up a browser with funcs and ops suitable to insert, i.e., having a signature compatible with the existing node's connections
- advanced editing
  - selection of multiple nodes
  - cut, copy, paste
  - drag and drop nodes between blocks
  - undo, redo
- rework typeView appearance
- display package name for top-level (imported) objects in browser
- browser text is not focused, so blinking cursor is not drawn.  focus text or show cursor in some other way.
- add in-place operators (+=, etc) that take a pointer as the first arg.
- give assignment node and in-place operators an output, for easier sequencing.
- use graphics instead of text to identify pointers, slices, funcs, maps, etc in typeView
- use different symbols for some operators (=, ≠, ≤, ≥, and, or, etc.)
- make gui.Text change its appearance based on content when a validator is present.  give validator 3 states:  Acceptable, Intermediate, Invalid.
- consider not lumping sequencing ports and connections in with the normal ones.  they can be annoying.  don't forget to consider them in the topological sorting order.
- one-off local functions
- reposition port.valView after creating new param/result
- remove sequencing ports from basic and composite literal nodes and readonly value nodes (const, func); they only have them so they can be sequenced with branchNodes (specifically, breaking from a loop or returning a value from a block).  Branch nodes should always be sequenced last; maybe they shouldn't be normal nodes, but attributes of a block.
- pass Command-W, Command-Q, etc in connection.KeyPress, Text.KeyPress, elsewhere?
- case-insensitive sorting in browser?  currently, all lowercase names follow all upper case.  also, don't sort operators?
- represent generic builtin operations consistently:  color convertNode and typeAssertNode the same as makeNode, newNode, et al.  Are they funcs (red) or specials (yellow)?  I think they are specials; they are generic and have well-defined effect and cost, unlike normal functions.  In which case operators should be colored as specials, too.
- use go/parser and go/ast to validate basic literals
- dimly highlight connected ports when a port is focused (or only when a key, e.g. Shift, is pressed) (but always for wireless conns)
- don't automatically discard dead code (unconnected literals, unassigned index expressions, unconnected append(), ...); write them instead as assigment to the blank identifier.  add a command to remove dead code at the user's discretion.
- make connectionBundles to reduce wire clutter?  each port has at most one connectionBundle that branches off connections near each port it connects to.  or don't add a new object, just draw connections coincident that originate at the same port.  especially bundle coincident connections that cross block boundaries.
- condition blocks for if, &&, ||
- use layered DAG as first approximation in arrangement?
- consider drawing nodes as circles/ellipses.  this is the easiest way to treat them when arranging, and it might even be visually ok.  loopNode will work fine, as its loopblk can be drawn as a circle; but ifNode, switchNode, and selectNode will be harder, having multiple blocks.
- in browser, by default don't show non-Go dirs (and don't show non-Flux dirs in isFluxObj mode); show them when Shift is pressed
- manage code flux:  names, signatures, types, etc.
  - update objects currently being edited
  - update known clients upon change (e.g., update callers when func sig changes)
  - handle changes during import and read.  (strip all func bodies in importer)
- handle funcs with an unconnected input whose type must be named to make a zero value (i.e., is ArrayType or StructType):  import package or, if it is an unexported type, complain and don't write files.
- stabilize file format so that textual diffs only show relevant changes:
  - order of imports (alphabetical).
  - node order? pro: deterministic build, stable files; con: hides bugs
  - variable names (also seqIDs)
- color conns by type.  hash type name, interpret as color.  or, use multiple colors to describe the whole type tree (outlined, woven, etc).
- improve valueView editing; currently, name and type can't be edited separately.  solution:  allow to focus name text.
- handle constant expressions:
  - a node in a const expr should be collapsable to its value; in particular, this will be nice in typeView for array length
- multiple panes for editing multiple funcs, types, etc.  panes arranged as Voronoi diagram, each pane with a center point and a relative size

before releasing:
- handle all errors
  - including reader.go parsing errors?
- documentation


LINKS
http://martinfowler.com/bliki/ProjectionalEditing.html
http://concrete-editor.org/#documentation
http://audicle.cs.princeton.edu/
http://sbel.wisc.edu/Courses/ME964/Literature/knuthProgramming1974.pdf
Leslie Lamport:
 - PHIL: A Semantic Structural Graphical Editor  (with Joseph Goguen); SRI International Technical Report (August 1983).  No electronic version available.   http://research.microsoft.com/en-us/um/people/lamport/pubs/pubs.html#phil
 - Document Production: Visual or Logical?  Notices of the American Mathematical Society (June 1987), 621-624.  http://research.microsoft.com/en-us/um/people/lamport/pubs/document-production.pdf
