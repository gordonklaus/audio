// Generated by Flux, not meant for human consumption.  Editing may make it unreadable by Flux.

package audio

import (
	"reflect"
)

func (p *Params) Set(x interface{}) () {
	var v map[interface{}]struct{}
	var v2 func(x6 reflect.Value)
	var v3 interface{}
	var v4 interface{}
	var v5 Params
	var v6 map[interface{}]struct{}
	var v7 map[interface{}]struct{}
	var v8 bool
	var v9 interface{}
	var v10 Params
	var v11 interface{}
	var v12 Params
	var v13 bool
	var v14 func(x6 reflect.Value)
	var v15 Params
	var v16 interface{}
	v15 = *p//p
	v5 = *p
	v12 = *p//p
	v9 = x//x
	v11 = x//x
	v3 = x//x
	v10 = *p//p
	v16 = x//x
	v4 = x//x
	x2 := v5.visited
	v = x2
	v6 = x2
	v7 = x2
	x3 := v7 == nil
	v13 = x3
	if v13 {
		x4 := map[interface{}]struct{}{}
		v = x4
		v6 = x4
	}
	_, ok := v[v4]
	v8 = ok
	x5 := func (x6 reflect.Value) () {
		var v17 reflect.Value
		var v18 reflect.Value
		var v19 reflect.Kind
		var v20 bool
		var v21 reflect.Value
		var v22 reflect.Kind
		var v23 bool
		var v24 bool
		var v25 bool
		var v26 bool
		var v27 reflect.Value
		var v28 reflect.Value
		var v29 bool
		var v30 reflect.Kind
		var v31 reflect.Kind
		v18 = x6
		v28 = x6
		v17 = x6
		v27 = x6
		v21 = x6
		x62 := v17.CanAddr()
		v29 = x62
		x7 := v28.Kind()
		v30 = x7
		v22 = x7
		const x8 = reflect.Ptr
		v19 = x8
		x9 := v30 != v19
		v23 = x9
		const x10 = reflect.Interface
		v31 = x10
		x11 := v22 != v31
		v24 = x11
		x12 := v23 && v24
		v25 = x12
		x13 := v29 && v25
		v20 = x13
		if v20 {
			x14 := v27.Addr()
			v18 = x14
			v21 = x14
		}
		x15 := v21.CanInterface()
		v26 = x15
		if v26 {
			var v32 interface{}
			i := v18.Interface()
			v32 = i
			v10.Set(v32)
		}
		return
	}
	v2 = x5//f
	v14 = x5//f
	if v8 {
	} else  {
		var v33 bool
		var v34 *Params
		var v35 bool
		var v36 AudioParamSetter
		x16, ok2 := v9.(AudioParamSetter)
		v36 = x16
		v33 = ok2
		var v37 struct{}
		v6[v16] = v37//;0
		if v33 {
			v36.SetAudioParams(v15)//0;
		} else  {
			var v38 reflect.Kind
			var v39 reflect.Kind
			var v40 bool
			var v41 reflect.Kind
			var v42 reflect.Value
			var v43 reflect.Value
			var v44 reflect.Kind
			var v45 reflect.Value
			var v46 bool
			var v47 reflect.Value
			var v48 reflect.Value
			var v49 reflect.Value
			x17 := reflect.ValueOf(v11)
			v42 = x17
			x18 := reflect.Indirect(v42)
			v47 = x18
			v48 = x18
			v43 = x18
			v49 = x18
			v45 = x18
			x19 := v43.Kind()
			v44 = x19
			v38 = x19
			const x20 = reflect.Struct
			v41 = x20
			x21 := v44 == v41
			v46 = x21
			if v46 {
				var v50 int
				x22 := v49.NumField()
				v50 = x22
				for k := int(0); k < v50; k++ {
					var v51 int
					var v52 reflect.Value
					v51 = k
					x23 := v45.Field(v51)
					v52 = x23
					v2(v52)
				}
			}
			const x24 = reflect.Slice
			v39 = x24
			x25 := v38 == v39
			v40 = x25
			if v40 {
				var v53 int
				x26 := v47.Len()
				v53 = x26
				for k2 := int(0); k2 < v53; k2++ {
					var v54 int
					var v55 reflect.Value
					v54 = k2
					x27 := v48.Index(v54)
					v55 = x27
					v14(v55)
				}
			}
		}
		x28, ok3 := v3.(*Params)
		v34 = x28
		v35 = ok3
		if v35 {
			*v34 = v12
		}
	}
	return
}
